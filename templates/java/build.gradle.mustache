plugins {
    id 'java'
    id 'jacoco'
}

group = '{{groupId}}'
version = '{{artifactVersion}}'
description = '{{artifactDescription}}'
java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.6.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
}

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options.tags = ['http.response.details:a:Http Response Details']
}

jacoco {
    toolVersion = '0.8.6'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

def jacocoExclude = [
    'com/trulioo/sdk/*.class',
    'com/trulioo/sdk/auth/HttpBasicAuth.class',
    'com/trulioo/sdk/auth/HttpBearerAuth.class',
]

jacocoTestReport {
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        })
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

tasks.register('testsJar', Jar) {
    archiveClassifier = 'tests'
    from(sourceSets.test.output)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
