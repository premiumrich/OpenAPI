# {{projectDescription}}

{{#artifactVersion}}
- Package version: {{artifactVersion}}
{{/artifactVersion}}
- API version: {{appVersion}}
- Build package: {{generatorClass}}

## Frameworks supported
- .NET Core >=1.0
- .NET Framework >=4.6
- Mono/Xamarin >=vNext

## Dependencies

- [RestSharp](https://www.nuget.org/packages/RestSharp) - 106.11.7 or later
- [Json.NET](https://www.nuget.org/packages/Newtonsoft.Json/) - 12.0.3 or later
- [JsonSubTypes](https://www.nuget.org/packages/JsonSubTypes/) - 1.8.0 or later
- [System.ComponentModel.Annotations](https://www.nuget.org/packages/System.ComponentModel.Annotations) - 5.0.0 or later

The DLLs included in the package may not be the latest version. We recommend using [NuGet](https://docs.nuget.org/consume/installing-nuget) to obtain the latest version of the packages:
```
Install-Package RestSharp
Install-Package Newtonsoft.Json
Install-Package JsonSubTypes
Install-Package System.ComponentModel.Annotations
```

## Installation

Generate the DLL using your preferred tool (e.g. `dotnet build`)

Then include the DLL (under the `bin` folder) in the C# project, and use the namespaces:
```csharp
using Trulioo.SDK.Api;
using Trulioo.SDK.Client;
using Trulioo.SDK.Model;
```

## Sample Application

Check out our sample application for this SDK in the
[sample-app](https://github.com/{{gitUserId}}/{{gitRepoId}}/tree/{{artifactVersion}}/sample-app) folder
## Getting Started

```csharp
using System.Collections.Generic;
using System.Diagnostics;
using Trulioo.SDK.Api;
using Trulioo.SDK.Client;
using Trulioo.SDK.Model;


namespace Example
{
  public class Example
  {
    public static void Main()
    {
      Configuration config = new Configuration();
      config.BasePath = "https://gateway.trulioo.com";
      // Configure API key authorization: ApiKeyAuth
      config.ApiKey.Add("x-trulioo-api-key", "YOUR-X-TRULIOO-API-KEY");
      // Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
      // config.ApiKeyPrefix.Add("x-trulioo-api-key", "Bearer");

      var apiInstance = new BusinessApi(config);
      var mode = mode_example;  // trial or live (default to "trial")
      var id = id_example;  // transaction record id

      try
      {
        // Get Business Search Result
        BusinessSearchResponse result = apiInstance.GetBusinessSearchResult(mode, id);
        Debug.WriteLine(result);
      }
      catch (ApiException e)
      {
        Debug.Print("Exception when calling BusinessApi.GetBusinessSearchResult: " + e.Message );
        Debug.Print("Status Code: "+ e.ErrorCode);
        Debug.Print(e.StackTrace);
      }
    }
  }
}
```

## Testing

This project uses [XUnit](https://xunit.net/) for unit testing.
Run:

```bash
dotnet test src/Trulioo.SDK.Test/
```


## Documentation for APIs

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{commonPath}}{{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
## Documentation for Models

{{#models}}{{#model}} - [{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}
## Documentation for Authorization

{{^authMethods}}All endpoints do not require authorization.
{{/authMethods}}
{{#authMethods}}### {{name}}

{{#isApiKey}}
- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}

- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}

- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}
{{/authMethods}}
