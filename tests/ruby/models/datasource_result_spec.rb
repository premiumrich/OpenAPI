=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::DatasourceResult do
  let(:model) { Trulioo::DatasourceResult.new }
  let(:test_attributes) {
    {
      datasource_status: SecureRandom.alphanumeric(10),
      datasource_name: SecureRandom.alphanumeric(10),
      datasource_fields: [],
      appended_fields: [],
      errors: [],
      field_groups: [],
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::DatasourceResult.acceptable_attributes).to eql([
      :"DatasourceStatus",
      :"DatasourceName",
      :"DatasourceFields",
      :"AppendedFields",
      :"Errors",
      :"FieldGroups",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::DatasourceResult.openapi_types.values).to eql([
      :"String",
      :"String",
      :"Array<DatasourceField>",
      :"Array<AppendedField>",
      :"Array<ServiceError>",
      :"Array<String>",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::DatasourceResult.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::DatasourceResult.new(test_attributes)

    expect(model.datasource_status).to be(test_attributes[:datasource_status])
    expect(model.datasource_name).to be(test_attributes[:datasource_name])
    expect(model.datasource_fields).to be(test_attributes[:datasource_fields])
    expect(model.appended_fields).to be(test_attributes[:appended_fields])
    expect(model.errors).to be(test_attributes[:errors])
    expect(model.field_groups).to be(test_attributes[:field_groups])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::DatasourceResult.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::DatasourceResult.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.datasource_status = test_attributes[:datasource_status]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::DatasourceResult.new({ datasource_status: test_attributes[:datasource_status] }))
  end

  it "should correctly calculate hash code" do
    model.datasource_status = test_attributes[:datasource_status]

    expect(Trulioo::DatasourceResult.new({ datasource_status: test_attributes[:datasource_status] }).hash).to eql(model.hash)
  end
end
