=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::NormalizedDatasourceGroupCountry do
  let(:model) { Trulioo::NormalizedDatasourceGroupCountry.new }
  let(:test_attributes) {
    {
      name: SecureRandom.alphanumeric(200),
      description: SecureRandom.alphanumeric(500),
      required_fields: [],
      optional_fields: [],
      appended_fields: [],
      output_fields: [],
      source_type: SecureRandom.alphanumeric(250),
      update_frequency: SecureRandom.alphanumeric(64),
      coverage: SecureRandom.alphanumeric(64),
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::NormalizedDatasourceGroupCountry.acceptable_attributes).to eql([
      :"Name",
      :"Description",
      :"RequiredFields",
      :"OptionalFields",
      :"AppendedFields",
      :"OutputFields",
      :"SourceType",
      :"UpdateFrequency",
      :"Coverage",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::NormalizedDatasourceGroupCountry.openapi_types.values).to eql([
      :"String",
      :"String",
      :"Array<NormalizedDatasourceField>",
      :"Array<NormalizedDatasourceField>",
      :"Array<NormalizedDatasourceField>",
      :"Array<NormalizedDatasourceField>",
      :"String",
      :"String",
      :"String",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::NormalizedDatasourceGroupCountry.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    model.instance_variable_set(:@name, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@description, SecureRandom.alphanumeric(500 + 1))
    expected_invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 500.')

    model.instance_variable_set(:@source_type, SecureRandom.alphanumeric(250 + 1))
    expected_invalid_properties.push('invalid value for "source_type", the character length must be smaller than or equal to 250.')

    model.instance_variable_set(:@update_frequency, SecureRandom.alphanumeric(64 + 1))
    expected_invalid_properties.push('invalid value for "update_frequency", the character length must be smaller than or equal to 64.')

    model.instance_variable_set(:@coverage, SecureRandom.alphanumeric(64 + 1))
    expected_invalid_properties.push('invalid value for "coverage", the character length must be smaller than or equal to 64.')

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
    expect { model.name = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.description = SecureRandom.alphanumeric(500 + 1) }.to raise_error(ArgumentError)
    expect { model.source_type = SecureRandom.alphanumeric(250 + 1) }.to raise_error(ArgumentError)
    expect { model.update_frequency = SecureRandom.alphanumeric(64 + 1) }.to raise_error(ArgumentError)
    expect { model.coverage = SecureRandom.alphanumeric(64 + 1) }.to raise_error(ArgumentError)
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::NormalizedDatasourceGroupCountry.new(test_attributes)

    expect(model.name).to be(test_attributes[:name])
    expect(model.description).to be(test_attributes[:description])
    expect(model.required_fields).to be(test_attributes[:required_fields])
    expect(model.optional_fields).to be(test_attributes[:optional_fields])
    expect(model.appended_fields).to be(test_attributes[:appended_fields])
    expect(model.output_fields).to be(test_attributes[:output_fields])
    expect(model.source_type).to be(test_attributes[:source_type])
    expect(model.update_frequency).to be(test_attributes[:update_frequency])
    expect(model.coverage).to be(test_attributes[:coverage])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::NormalizedDatasourceGroupCountry.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::NormalizedDatasourceGroupCountry.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.name = test_attributes[:name]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::NormalizedDatasourceGroupCountry.new({ name: test_attributes[:name] }))
  end

  it "should correctly calculate hash code" do
    model.name = test_attributes[:name]

    expect(Trulioo::NormalizedDatasourceGroupCountry.new({ name: test_attributes[:name] }).hash).to eql(model.hash)
  end
end
