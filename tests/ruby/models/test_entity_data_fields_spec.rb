=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::TestEntityDataFields do
  let(:model) { Trulioo::TestEntityDataFields.new }
  let(:test_attributes) {
    {
      location: Trulioo::Location.new,
      test_entity_name: SecureRandom.alphanumeric(10),
      person_info: Trulioo::PersonInfo.new,
      communication: Trulioo::Communication.new,
      driver_licence: Trulioo::DriverLicence.new,
      national_ids: [],
      passport: Trulioo::Passport.new,
      document: Trulioo::Document.new,
      business: Trulioo::Business.new,
      country_specific: {},
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::TestEntityDataFields.acceptable_attributes).to eql([
      :"Location",
      :"TestEntityName",
      :"PersonInfo",
      :"Communication",
      :"DriverLicence",
      :"NationalIds",
      :"Passport",
      :"Document",
      :"Business",
      :"CountrySpecific",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::TestEntityDataFields.openapi_types.values).to eql([
      :"Location",
      :"String",
      :"PersonInfo",
      :"Communication",
      :"DriverLicence",
      :"Array<NationalId>",
      :"Passport",
      :"Document",
      :"Business",
      :"Hash<String, Hash<String, String>>",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::TestEntityDataFields.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::TestEntityDataFields.new(test_attributes)

    expect(model.location).to be(test_attributes[:location])
    expect(model.test_entity_name).to be(test_attributes[:test_entity_name])
    expect(model.person_info).to be(test_attributes[:person_info])
    expect(model.communication).to be(test_attributes[:communication])
    expect(model.driver_licence).to be(test_attributes[:driver_licence])
    expect(model.national_ids).to be(test_attributes[:national_ids])
    expect(model.passport).to be(test_attributes[:passport])
    expect(model.document).to be(test_attributes[:document])
    expect(model.business).to be(test_attributes[:business])
    expect(model.country_specific).to be(test_attributes[:country_specific])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::TestEntityDataFields.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::TestEntityDataFields.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.location = test_attributes[:location]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::TestEntityDataFields.new({ location: test_attributes[:location] }))
  end

  it "should correctly calculate hash code" do
    model.location = test_attributes[:location]

    expect(Trulioo::TestEntityDataFields.new({ location: test_attributes[:location] }).hash).to eql(model.hash)
  end
end
