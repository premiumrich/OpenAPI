=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::Communication do
  let(:model) { Trulioo::Communication.new }
  let(:test_attributes) {
    {
      mobile_number: SecureRandom.alphanumeric(200),
      telephone: SecureRandom.alphanumeric(200),
      telephone2: SecureRandom.alphanumeric(200),
      email_address: SecureRandom.alphanumeric(200),
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::Communication.acceptable_attributes).to eql([
      :"MobileNumber",
      :"Telephone",
      :"Telephone2",
      :"EmailAddress",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::Communication.openapi_types.values).to eql([
      :"String",
      :"String",
      :"String",
      :"String",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::Communication.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    model.instance_variable_set(:@mobile_number, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "mobile_number", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@telephone, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "telephone", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@telephone2, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "telephone2", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@email_address, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "email_address", the character length must be smaller than or equal to 200.')

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
    expect { model.mobile_number = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.telephone = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.telephone2 = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.email_address = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::Communication.new(test_attributes)

    expect(model.mobile_number).to be(test_attributes[:mobile_number])
    expect(model.telephone).to be(test_attributes[:telephone])
    expect(model.telephone2).to be(test_attributes[:telephone2])
    expect(model.email_address).to be(test_attributes[:email_address])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::Communication.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::Communication.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.mobile_number = test_attributes[:mobile_number]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::Communication.new({ mobile_number: test_attributes[:mobile_number] }))
  end

  it "should correctly calculate hash code" do
    model.mobile_number = test_attributes[:mobile_number]

    expect(Trulioo::Communication.new({ mobile_number: test_attributes[:mobile_number] }).hash).to eql(model.hash)
  end
end
