=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::CountrySubdivision do
  let(:model) { Trulioo::CountrySubdivision.new }
  let(:test_attributes) {
    {
      name: SecureRandom.alphanumeric(100),
      code: SecureRandom.alphanumeric(100),
      parent_code: SecureRandom.alphanumeric(5),
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::CountrySubdivision.acceptable_attributes).to eql([
      :"Name",
      :"Code",
      :"ParentCode",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::CountrySubdivision.openapi_types.values).to eql([
      :"String",
      :"String",
      :"String",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::CountrySubdivision.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    model.instance_variable_set(:@name, SecureRandom.alphanumeric(100 + 1))
    expected_invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 100.')

    model.instance_variable_set(:@code, SecureRandom.alphanumeric(100 + 1))
    expected_invalid_properties.push('invalid value for "code", the character length must be smaller than or equal to 100.')

    model.instance_variable_set(:@parent_code, SecureRandom.alphanumeric(5 + 1))
    expected_invalid_properties.push('invalid value for "parent_code", the character length must be smaller than or equal to 5.')

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
    expect { model.name = SecureRandom.alphanumeric(100 + 1) }.to raise_error(ArgumentError)
    expect { model.code = SecureRandom.alphanumeric(100 + 1) }.to raise_error(ArgumentError)
    expect { model.parent_code = SecureRandom.alphanumeric(5 + 1) }.to raise_error(ArgumentError)
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::CountrySubdivision.new(test_attributes)

    expect(model.name).to be(test_attributes[:name])
    expect(model.code).to be(test_attributes[:code])
    expect(model.parent_code).to be(test_attributes[:parent_code])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::CountrySubdivision.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::CountrySubdivision.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.name = test_attributes[:name]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::CountrySubdivision.new({ name: test_attributes[:name] }))
  end

  it "should correctly calculate hash code" do
    model.name = test_attributes[:name]

    expect(Trulioo::CountrySubdivision.new({ name: test_attributes[:name] }).hash).to eql(model.hash)
  end
end
