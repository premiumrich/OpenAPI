=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::BusinessSearchRequestBusinessSearchModel do
  let(:model) { Trulioo::BusinessSearchRequestBusinessSearchModel.new }
  let(:test_attributes) {
    {
      business_name: SecureRandom.alphanumeric(250),
      website: SecureRandom.alphanumeric(250),
      jurisdiction_of_incorporation: SecureRandom.alphanumeric(250),
      duns_number: SecureRandom.alphanumeric(250),
      location: Trulioo::Location.new,
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::BusinessSearchRequestBusinessSearchModel.acceptable_attributes).to eql([
      :"BusinessName",
      :"Website",
      :"JurisdictionOfIncorporation",
      :"DUNSNumber",
      :"Location",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::BusinessSearchRequestBusinessSearchModel.openapi_types.values).to eql([
      :"String",
      :"String",
      :"String",
      :"String",
      :"Location",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::BusinessSearchRequestBusinessSearchModel.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    model.instance_variable_set(:@business_name, SecureRandom.alphanumeric(250 + 1))
    expected_invalid_properties.push('invalid value for "business_name", the character length must be smaller than or equal to 250.')

    model.instance_variable_set(:@website, SecureRandom.alphanumeric(250 + 1))
    expected_invalid_properties.push('invalid value for "website", the character length must be smaller than or equal to 250.')

    model.instance_variable_set(:@jurisdiction_of_incorporation, SecureRandom.alphanumeric(250 + 1))
    expected_invalid_properties.push('invalid value for "jurisdiction_of_incorporation", the character length must be smaller than or equal to 250.')

    model.instance_variable_set(:@duns_number, SecureRandom.alphanumeric(250 + 1))
    expected_invalid_properties.push('invalid value for "duns_number", the character length must be smaller than or equal to 250.')

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
    expect { model.business_name = SecureRandom.alphanumeric(250 + 1) }.to raise_error(ArgumentError)
    expect { model.website = SecureRandom.alphanumeric(250 + 1) }.to raise_error(ArgumentError)
    expect { model.jurisdiction_of_incorporation = SecureRandom.alphanumeric(250 + 1) }.to raise_error(ArgumentError)
    expect { model.duns_number = SecureRandom.alphanumeric(250 + 1) }.to raise_error(ArgumentError)
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::BusinessSearchRequestBusinessSearchModel.new(test_attributes)

    expect(model.business_name).to be(test_attributes[:business_name])
    expect(model.website).to be(test_attributes[:website])
    expect(model.jurisdiction_of_incorporation).to be(test_attributes[:jurisdiction_of_incorporation])
    expect(model.duns_number).to be(test_attributes[:duns_number])
    expect(model.location).to be(test_attributes[:location])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::BusinessSearchRequestBusinessSearchModel.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::BusinessSearchRequestBusinessSearchModel.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.business_name = test_attributes[:business_name]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::BusinessSearchRequestBusinessSearchModel.new({ business_name: test_attributes[:business_name] }))
  end

  it "should correctly calculate hash code" do
    model.business_name = test_attributes[:business_name]

    expect(Trulioo::BusinessSearchRequestBusinessSearchModel.new({ business_name: test_attributes[:business_name] }).hash).to eql(model.hash)
  end
end
