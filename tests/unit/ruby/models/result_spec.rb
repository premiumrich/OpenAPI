=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::Result do
  let(:model) { Trulioo::Result.new }
  let(:test_attributes) {
    {
      index: SecureRandom.alphanumeric(10),
      business_name: SecureRandom.alphanumeric(10),
      matching_score: SecureRandom.alphanumeric(10),
      business_registration_number: SecureRandom.alphanumeric(10),
      duns_number: SecureRandom.alphanumeric(10),
      business_tax_id_number: SecureRandom.alphanumeric(10),
      business_license_number: SecureRandom.alphanumeric(10),
      jurisdiction_of_incorporation: SecureRandom.alphanumeric(10),
      full_address: SecureRandom.alphanumeric(10),
      business_status: SecureRandom.alphanumeric(10),
      trade_style_name: SecureRandom.alphanumeric(10),
      business_type: SecureRandom.alphanumeric(10),
      address: Trulioo::Address.new,
      other_business_names: [],
      website: SecureRandom.alphanumeric(10),
      telephone: SecureRandom.alphanumeric(10),
      tax_id_number: SecureRandom.alphanumeric(10),
      tax_id_numbers: [],
      email_address: SecureRandom.alphanumeric(10),
      web_domain: SecureRandom.alphanumeric(10),
      web_domains: [],
      naics: [],
      sic: [],
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::Result.acceptable_attributes).to eql([
      :"Index",
      :"BusinessName",
      :"MatchingScore",
      :"BusinessRegistrationNumber",
      :"DUNSNumber",
      :"BusinessTaxIDNumber",
      :"BusinessLicenseNumber",
      :"JurisdictionOfIncorporation",
      :"FullAddress",
      :"BusinessStatus",
      :"TradeStyleName",
      :"BusinessType",
      :"Address",
      :"OtherBusinessNames",
      :"Website",
      :"Telephone",
      :"TaxIDNumber",
      :"TaxIDNumbers",
      :"EmailAddress",
      :"WebDomain",
      :"WebDomains",
      :"NAICS",
      :"SIC",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::Result.openapi_types.values).to eql([
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"Address",
      :"Array<String>",
      :"String",
      :"String",
      :"String",
      :"Array<String>",
      :"String",
      :"String",
      :"Array<String>",
      :"Array<BusinessSearchResponseIndustryCode>",
      :"Array<BusinessSearchResponseIndustryCode>",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::Result.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::Result.new(test_attributes)

    expect(model.index).to be(test_attributes[:index])
    expect(model.business_name).to be(test_attributes[:business_name])
    expect(model.matching_score).to be(test_attributes[:matching_score])
    expect(model.business_registration_number).to be(test_attributes[:business_registration_number])
    expect(model.duns_number).to be(test_attributes[:duns_number])
    expect(model.business_tax_id_number).to be(test_attributes[:business_tax_id_number])
    expect(model.business_license_number).to be(test_attributes[:business_license_number])
    expect(model.jurisdiction_of_incorporation).to be(test_attributes[:jurisdiction_of_incorporation])
    expect(model.full_address).to be(test_attributes[:full_address])
    expect(model.business_status).to be(test_attributes[:business_status])
    expect(model.trade_style_name).to be(test_attributes[:trade_style_name])
    expect(model.business_type).to be(test_attributes[:business_type])
    expect(model.address).to be(test_attributes[:address])
    expect(model.other_business_names).to be(test_attributes[:other_business_names])
    expect(model.website).to be(test_attributes[:website])
    expect(model.telephone).to be(test_attributes[:telephone])
    expect(model.tax_id_number).to be(test_attributes[:tax_id_number])
    expect(model.tax_id_numbers).to be(test_attributes[:tax_id_numbers])
    expect(model.email_address).to be(test_attributes[:email_address])
    expect(model.web_domain).to be(test_attributes[:web_domain])
    expect(model.web_domains).to be(test_attributes[:web_domains])
    expect(model.naics).to be(test_attributes[:naics])
    expect(model.sic).to be(test_attributes[:sic])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::Result.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::Result.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.index = test_attributes[:index]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::Result.new({ index: test_attributes[:index] }))
  end

  it "should correctly calculate hash code" do
    model.index = test_attributes[:index]

    expect(Trulioo::Result.new({ index: test_attributes[:index] }).hash).to eql(model.hash)
  end
end
