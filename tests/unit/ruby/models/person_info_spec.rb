=begin
Trulioo Ruby SDK

Gem version: 1.0.0
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
=end

require "spec_helper"
require "securerandom"

describe Trulioo::PersonInfo do
  let(:model) { Trulioo::PersonInfo.new }
  let(:test_attributes) {
    {
      first_given_name: SecureRandom.alphanumeric(200),
      middle_name: SecureRandom.alphanumeric(200),
      first_sur_name: SecureRandom.alphanumeric(200),
      second_surname: SecureRandom.alphanumeric(200),
      iso_latin1_name: SecureRandom.alphanumeric(200),
      day_of_birth: 123,
      month_of_birth: 123,
      year_of_birth: 123,
      minimum_age: 123,
      gender: SecureRandom.alphanumeric(10),
      additional_fields: Trulioo::PersonInfoAdditionalFields.new,
    }
  }

  it "should have correct array of acceptable JSON keys" do
    expect(Trulioo::PersonInfo.acceptable_attributes).to eql([
      :"FirstGivenName",
      :"MiddleName",
      :"FirstSurName",
      :"SecondSurname",
      :"ISOLatin1Name",
      :"DayOfBirth",
      :"MonthOfBirth",
      :"YearOfBirth",
      :"MinimumAge",
      :"Gender",
      :"AdditionalFields",
    ])
  end

  it "should have correct array of acceptable attribute types" do
    expect(Trulioo::PersonInfo.openapi_types.values).to eql([
      :"String",
      :"String",
      :"String",
      :"String",
      :"String",
      :"Integer",
      :"Integer",
      :"Integer",
      :"Integer",
      :"String",
      :"PersonInfoAdditionalFields",
    ])
  end

  it "should have correct set of nullable attributes" do
    expect(Trulioo::PersonInfo.openapi_nullable).to eql(Set.new([]))
  end

  it "should have correct array of invalid properties" do
    expected_invalid_properties = Array.new

    model.instance_variable_set(:@first_given_name, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "first_given_name", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@middle_name, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@first_sur_name, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "first_sur_name", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@second_surname, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "second_surname", the character length must be smaller than or equal to 200.')

    model.instance_variable_set(:@iso_latin1_name, SecureRandom.alphanumeric(200 + 1))
    expected_invalid_properties.push('invalid value for "iso_latin1_name", the character length must be smaller than or equal to 200.')

    expect(model.list_invalid_properties).to eql(expected_invalid_properties)
  end

  it "should perform any validation in custom attribute writers" do
    expect { model.first_given_name = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.middle_name = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.first_sur_name = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.second_surname = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
    expect { model.iso_latin1_name = SecureRandom.alphanumeric(200 + 1) }.to raise_error(ArgumentError)
  end

  it "should correctly initialize with attributes from Hash" do
    model = Trulioo::PersonInfo.new(test_attributes)

    expect(model.first_given_name).to be(test_attributes[:first_given_name])
    expect(model.middle_name).to be(test_attributes[:middle_name])
    expect(model.first_sur_name).to be(test_attributes[:first_sur_name])
    expect(model.second_surname).to be(test_attributes[:second_surname])
    expect(model.iso_latin1_name).to be(test_attributes[:iso_latin1_name])
    expect(model.day_of_birth).to be(test_attributes[:day_of_birth])
    expect(model.month_of_birth).to be(test_attributes[:month_of_birth])
    expect(model.year_of_birth).to be(test_attributes[:year_of_birth])
    expect(model.minimum_age).to be(test_attributes[:minimum_age])
    expect(model.gender).to be(test_attributes[:gender])
    expect(model.additional_fields).to be(test_attributes[:additional_fields])

    expect(model.valid?).to be true
  end

  it "should not initialize with a non-Hash argument" do
    expect { Trulioo::PersonInfo.new([]) }.to raise_error(ArgumentError)
  end

  it "should not initialize with a Hash that contains an invalid attribute" do
    expect { Trulioo::PersonInfo.new({ test_invalid_key: "" }) }.to raise_error(ArgumentError)
  end

  it "should correctly check object equality" do
    model.first_given_name = test_attributes[:first_given_name]

    expect(model).to equal(model)
    expect(model).to eql(Trulioo::PersonInfo.new({ first_given_name: test_attributes[:first_given_name] }))
  end

  it "should correctly calculate hash code" do
    model.first_given_name = test_attributes[:first_given_name]

    expect(Trulioo::PersonInfo.new({ first_given_name: test_attributes[:first_given_name] }).hash).to eql(model.hash)
  end
end
